tar2, ".png"),
width = 8, height = 6)
}
}
library(biosensor)
library(biosensor)
getwd()
setwd("20160908_gaskXP-001a/\")
setwd("20160908_gaskXP-001a/")
analyzeBiosensorData()
traceback()
library(biosensor)
setwd("20160908_gaskXP-001a/")
getwd()
analyzeBiosensorData()
library(biosensor)
library(biosensor)
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#'
#' @export
calibrationStation <- function(celebrate = TRUE) {
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData()
setwd(directory)
})
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
library(biosensor)
library(biosensor)
?analyzeBiosensorData
library(biosensor)
library(biosensor)
setwd("C:/Users/james_000/Downloads/CalibrateMe/")
calibrationStation(time1 = 52, time2 = 41, fsr = TRUE)
traceback()
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
View(combineNetShifts())
View(combineNetShifts
View(combineNetShifts)
x <- combineNetShifts()
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
netComb <- dplyr::bind_rows(netShifts)
netComb <- dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
netCombAvg <- dplyr::group_by(netComb, Target, Concentration)
netComb
library(biosensor)
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
combineNetShifts()
calibrationStation()
getwd()
setwd("..")
calibrationStation(time = 52, time2 = 41, fsr = TRUE)
library(biosensor)
getwd()
setwd("..")
calibrationStation(time = 52, time2 = 41, fsr = TRUE)
library(biosensor)
getwd()
library(biosensor)
library(tidyverse)
tidyverse_logo()
`%>%` <- magrittr::"%>%"
netComb <- netShift %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::"%>%"
netComb <- netShift %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::"%>%"
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
library(biosensor)
getwd()
setwd("C:/Users/james_000/Downloads/CalibrateMe/20171109_gask01_Sample1_2_12plexTracer_SAHRP_Kirby_11092017/")
analyzeBiosensorData()
library(biosensor)
setwd("D:/Box Sync/XPP_Data/")
library(biosensor)
getwd()
setwd("20160913_gaskXPP-004a/")
analyzeBiosensorData(getLayoutFile = TRUE)
getwd()
library(biosensor)
library(biosensor)
foldersList <- list.dirs(recursive = FALSE)
foldersList
setwd("..")
foldersList
foldersList <- list.dirs(recursive = FALSE)
foldersList
setwd("20160913_gaskXPP-004a/")
foldersList <- list.dirs(recursive = FALSE)
foldersList
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#'
#' @export
calibrationStation <- function(time1 = 51,
time2 = 39,
getLayoutFile = FALSE,
calibrate = FALSE,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = FALSE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
party = TRUE) {
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData()
setwd(directory)
})
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
if (party){shell.exec("https://youtu.be/L_jWHffIx5E?t=34s")}
}
library(biosensor)
calibrationStation(getLayoutFile = TRUE)
getwd()
setwd("..")
calibrationStation(getLayoutFile = TRUE)
calibrationStation(getLayoutFile = TRUE)
setwd('..')
calibrationStation(getLayoutFile = TRUE)
getwd()
setwd("..")
getwd()
calibrationStation(getLayoutFile = TRUE)
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
foldersList
getwd()
setwd("..")
getwd()
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
foldersList
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData()
setwd(directory)
})
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#'
#' @export
calibrationStation <- function(time1 = 51,
time2 = 39,
getLayoutFile = FALSE,
calibrate = FALSE,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = FALSE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
party = TRUE) {
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData(time1 = time1, time2 = time2,
getLayoutFile = getLayoutFile,
filename = filename, loc = loc,
cntl = cntl, chopRun = chopRun,
fsr = fsr, chkRings = chkRings,
plotData = plotData, celebrate = celebrate,
netShift = netShift)
setwd(directory)
})
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
if (party){shell.exec("https://youtu.be/L_jWHffIx5E?t=34s")}
}
getwD()
getwd()
setwd("..")
calibrationStation(getLayoutFile = TRUE)
traceback()
getwd()
analyzeBiosensorData()
library(biosensor)
getwd()
setwd("..")
calibrationStation(getLayoutFile = TRUE)
## Run all of the above functions to generate plots
plotDataRoutine <- function(){
# Load libraries and set theme for all plots
library(tidyverse)
library(biosensor)
# ggthemr::ggthemr(palette = "fresh")
plotTheme <- theme_bw(base_size = 16) +
theme(panel.grid = element_blank())
ggplot2::theme_set(plotTheme)
setwd("D:/Box Sync/XPP_Data")
# Load in data to make plots
x <- compLabelNorm()
compDat <- x[[1]]
# Save current wd to return to later and setwd to plots folder
directory <- getwd()
setwd("../XPP_Plots/")
plotFullSet(data = compDat)
plotEachTxt(data = compDat)
plotEachTar(data = compDat)
control <- "DMSO"
txtList <- unique(compDat$Treatment)
compTargets <- c("pAktSer473", "pS6Ser235/6", "pS6Ser240/4",
"pp70S6KThr389", "pRbSer780", "pRbSer807/11")
lapply(txtList, function(i){
plotTxt(data = compDat, control = control, treatment = i,
targets = compTargets, cellLine = "GBM6")
plotTxt(data = compDat, control = control, treatment = i,
targets = compTargets, cellLine = "GBM26")
})
# Pairwise treatment list
txtPairs <- combn(unique(compDat$Treatment), 2, simplify = FALSE)
# Run through pair-wise list to plot treatment comparisons
lapply(txtPairs, function(i){
txtComp(data = compDat, treatments = as.vector(i),
targets = compTargets, cellLine = "GBM6")
txtComp(data = compDat, treatments = as.vector(i),
targets = compTargets, cellLine = "GBM26")
})
cytometry(data = compDat)
setwd(directory)
}
getwd()
devtools::install_github("BaileyLabUM/biosensor")
library(biosensor)
doEverything()
plotDataRoutine <- function(){
# set theme for all plots
plotTheme <- ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(panel.grid = ggplot2::element_blank())
ggplot2::theme_set(plotTheme)
# change working directory to data location
setwd("D:/Box Sync/XPP_Data")
# Load in data to make plots
x <- compLabelNorm()
compDat <- x[[1]]
# Save current wd to return to later and setwd to plots folder
directory <- getwd()
setwd("../XPP_Plots/")
plotFullSet(data = compDat)
plotEachTxt(data = compDat)
plotEachTar(data = compDat)
control <- "DMSO"
txtList <- unique(compDat$Treatment)
compTargets <- c("pAktSer473", "pS6Ser235/6", "pS6Ser240/4",
"pp70S6KThr389", "pRbSer780", "pRbSer807/11")
lapply(txtList, function(i){
plotTxt(data = compDat, control = control, treatment = i,
targets = compTargets, cellLine = "GBM6")
plotTxt(data = compDat, control = control, treatment = i,
targets = compTargets, cellLine = "GBM26")
})
# Pairwise treatment list
txtPairs <- combn(unique(compDat$Treatment), 2, simplify = FALSE)
# Run through pair-wise list to plot treatment comparisons
lapply(txtPairs, function(i){
txtComp(data = compDat, treatments = as.vector(i),
targets = compTargets, cellLine = "GBM6")
txtComp(data = compDat, treatments = as.vector(i),
targets = compTargets, cellLine = "GBM26")
})
cytometry(data = compDat)
setwd(directory)
}
library(biosensor)
library(biosensor)
library(biosensor)
getwd()
plotDataRoutine()
plotDataRoutine()
library(biosensor)
?element_text
?factor
?interaction
?rbind
library(biosensor)
plotDataRoutine()
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
plotFullSet()
# set theme for all plots
plotTheme <- ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(panel.grid = ggplot2::element_blank())
ggplot2::theme_set(plotTheme)
# change working directory to data location
setwd("D:/Box Sync/XPP_Data")
# Load in data to make plots
x <- compLabelNorm()
compDat <- x[[1]]
# Save current wd to return to later and setwd to plots folder
directory <- getwd()
setwd("../XPP_Plots/")
plotFullSet(data = compDat)
plotDataRoutine <- function(){
# set theme for all plots
plotTheme <- ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(panel.grid = ggplot2::element_blank())
ggplot2::theme_set(plotTheme)
# change working directory to data location
setwd("D:/Box Sync/XPP_Data")
# Load in data to make plots
x <- compLabelNorm()
compDat <- x[[1]]
# Save current wd to return to later and setwd to plots folder
directory <- getwd()
setwd("../XPP_Plots/")
plotFullSet(data = compDat)
plotEachTxt(data = compDat)
plotEachTar(data = compDat)
control <- "DMSO"
txtList <- unique(compDat$Treatment)
compTargets <- c("pAktSer473", "pS6Ser235/6", "pS6Ser240/4",
"pp70S6KThr389", "pRbSer780", "pRbSer807/11")
lapply(txtList, function(i){
plotTxt(data = compDat, control = control, treatment = i,
targets = compTargets, cellLine = "GBM6")
plotTxt(data = compDat, control = control, treatment = i,
targets = compTargets, cellLine = "GBM26")
})
# Pairwise treatment list
txtPairs <- combn(unique(compDat$Treatment), 2, simplify = FALSE)
# Run through pair-wise list to plot treatment comparisons
lapply(txtPairs, function(i){
txtComp(data = compDat, treatments = as.vector(i),
targets = compTargets, cellLine = "GBM6")
txtComp(data = compDat, treatments = as.vector(i),
targets = compTargets, cellLine = "GBM26")
})
cytometry(data = compDat)
setwd(directory)
}
plotDataRoutine()
traceback()
data <- compDat
targetList <- unique(data$Target)
for(i in targetList) {
tarDat <- dplyr::filter(data,
Target == i &
Treatment != "(+)-Serum" &
Treatment != "(-)-Serum")
g <- ggplot2::ggplot(tarDat, ggplot2::aes(x = Treatment,
y = NormLog))
plotName <- unlist(strsplit(i, "/"))[1]
targetPoint <- g +
ggplot2:geom_point(ggplot2::aes(color = TimePoint),
position = "jitter") +
ggplot2::facet_grid(CellLine~.) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", color = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
targetBox <- g +
ggplot2:geom_boxplot(ggplot2::aes(fill = TimePoint)) +
ggplot2::facet_grid(CellLine~.) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", fill = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
targetBox2 <- g +
ggplot2:geom_boxplot(ggplot2::aes(fill =
interaction(TimePoint,
CellLine))) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", fill = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
dir.create("Target Plots", showWarnings = FALSE)
ggplot2::ggsave(targetPoint,
filename = paste0("Target Plots/",
plotName, "_point.png"),
width = 8, height = 6)
ggplot2::ggsave(targetBox,
filename = paste0("Target Plots/",
plotName, "_boxplot.png"),
width = 8, height = 6)
ggplot2::ggsave(targetBox2,
filename = paste0("Target Plots/",
plotName, "_boxplot_2.png"),
width = 8, height = 6)
}
i <- targetList[1]
tarDat <- dplyr::filter(data,
Target == i &
Treatment != "(+)-Serum" &
Treatment != "(-)-Serum")
g <- ggplot2::ggplot(tarDat, ggplot2::aes(x = Treatment,
y = NormLog))
plotName <- unlist(strsplit(i, "/"))[1]
targetPoint <- g +
ggplot2:geom_point(ggplot2::aes(color = TimePoint),
position = "jitter") +
ggplot2::facet_grid(CellLine~.) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", color = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
?labs
?theme
?element_text
g <- ggplot2::ggplot(tarDat, ggplot2::aes(x = Treatment,
y = NormLog))
g
plotName <- unlist(strsplit(i, "/"))[1]
plotName <- unlist(strsplit(i, "/"))[1]
i
targetList[1]
targetPoint <- g +
ggplot2:geom_point(ggplot2::aes(color = TimePoint),
position = "jitter") +
ggplot2::facet_grid(CellLine~.) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", color = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
targetBox <- g +
ggplot2:geom_boxplot(ggplot2::aes(fill = TimePoint)) +
ggplot2::facet_grid(CellLine~.) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", fill = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
targetBox <- g +
ggplot2:geom_boxplot(aes(fill = TimePoint)) +
ggplot2::facet_grid(CellLine~.) +
ggplot2::ggtitle(paste0("Target: ", i)) +
ggplot2::labs(y = "Normalized Response", fill = "") +
ggplot2::theme(axis.text.x =
ggplot2::element_text(angle = 45,
hjust = 1))
