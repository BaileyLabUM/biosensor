step = 1,
loc = loc)
plotNetShifts(data = netDat_ch1, step = 1, loc = loc)
plotNetShifts(data = netDat_ch2, step = 1, loc = loc)
}
if (chkRings){
checkRingQuality(data = aggData,
chkTime1 = 20,
chkTime2 = 30,
loc = loc)}
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
analyzeBiosensorData(netShifts = F)
filename = "groupNames_allClusters.csv"
loc = "plots"
fsr = FALSE
chkRings = FALSE
plotData = TRUE
celebrate = TRUE
netShifts = TRUE
getName()
aggDat <- aggData(filename = filename, loc = loc, fsr = fsr)
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = "thermal",
loc = loc)
aggDat <- aggData(filename = filename, loc = loc, fsr = fsr)
aggDat
View(aggDat)
data <- aggDat
ch <- "U"
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data
data <- dplyr::filter(data, Target != "Ignore")
data
cntl <- "thermal"
# get thermal control averages
controls <- dplyr::filter(data, Target == cntl)
controls <- dplyr::group_by(controls, TimePoint)
controls <- dplyr::summarise_at(controls, "Shift", mean)
controls <- unlist(dplyr::select(controls, Shift) )
data$Cntl <- rep(controls, length(unique(data$Ring)))
# subtracts thermal controls from each ring
cntlDat <- dplyr::mutate(data, Corrected = Shift - Cntl)
# remove control column and control rings
cntlDat <- dplyr::filter(cntlDat, Target != cntl &
Target != "thermal")
cntlDat$Cntl <- cntl
cntlDat$Ch <- ch
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = "thermal",
loc = loc)
loc
data = aggDat,
ch = 1,
cntl = "thermal",
loc = loc
data = aggDat
ch = 1
cntl = "thermal"
loc = loc
loc
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data <- dplyr::filter(data, Target != "Ignore")
# get thermal control averages
controls <- dplyr::filter(data, Target == cntl)
controls <- dplyr::group_by(controls, TimePoint)
controls <- dplyr::summarise_at(controls, "Shift", mean)
controls <- unlist(dplyr::select(controls, Shift) )
data$Cntl <- rep(controls, length(unique(data$Ring)))
# subtracts thermal controls from each ring
cntlDat <- dplyr::mutate(data, Corrected = Shift - Cntl)
# remove control column and control rings
cntlDat <- dplyr::filter(cntlDat, Target != cntl &
Target != "thermal")
cntlDat$Cntl <- cntl
cntlDat$Ch <- ch
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data <- dplyr::filter(data, Target != "Ignore")
# get thermal control averages
controls <- dplyr::filter(data, Target == cntl)
controls <- dplyr::group_by(controls, TimePoint)
controls <- dplyr::summarise_at(controls, "Shift", mean)
controls <- unlist(dplyr::select(controls, Shift) )
data$Cntl <- rep(controls, length(unique(data$Ring)))
# subtracts thermal controls from each ring
cntlDat <- dplyr::mutate(data, Corrected = Shift - Cntl)
# remove control column and control rings
cntlDat <- dplyr::filter(cntlDat, Target != cntl &
Target != "thermal")
cntlDat$Cntl <- cntl
# get thermal control averages
controls <- dplyr::filter(data, Target == cntl)
controls <- dplyr::group_by(controls, TimePoint)
controls <- dplyr::summarise_at(controls, "Shift", mean)
controls <- unlist(dplyr::select(controls, Shift) )
data$Cntl <- rep(controls, length(unique(data$Ring)))
# subtracts thermal controls from each ring
cntlDat <- dplyr::mutate(data, Corrected = Shift - Cntl)
# remove control column and control rings
cntlDat <- dplyr::filter(cntlDat, Target != cntl &
Target != "thermal")
cntlDat$Cntl <- cntl
cntl
cntlDat$Cntl <- cntl
cntlDat$Ch <- ch
cntlDat
# subtracts thermal controls from each ring
cntlDat <- dplyr::mutate(data, Corrected = Shift - Cntl)
cntlDat
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data <- dplyr::filter(data, Target != "Ignore")
# get thermal control averages
controls <- dplyr::filter(data, Target == cntl)
controls <- dplyr::group_by(controls, TimePoint)
controls <- dplyr::summarise_at(controls, "Shift", mean)
controls <- unlist(dplyr::select(controls, Shift) )
data$Cntl <- rep(controls, length(unique(data$Ring)))
data
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data
data <- aggData
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
ddata <- dplyr::filter(data, Target != "Ignore")
data <- aggDat
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
ddata <- dplyr::filter(data, Target != "Ignore")
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data <- dplyr::filter(data, Target != "Ignore")
data
data <- aggDat
data
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data <- dplyr::filter(data, Target != "Ignore")
data
data <- aggData
ch
data <- aggDat
# filter data by Channel
if (ch != "U"){data <- dplyr::filter(data, Channel == ch)}
data
data <- aggDat
data
unique(data$Channel)
channels <- unique(aggDat$Channel)
1 %in% channels
2 %in% channels
exists(subDat_ch1)
exists("subDat_ch1")
analyzeBiosensorData <- function(time1 = 51, time2 = 39,
filename = "groupNames_allClusters.csv",
loc = "plots",
fsr = FALSE,
chkRings = FALSE,
plotData = TRUE,
celebrate = TRUE,
netShifts = TRUE) {
getName()
aggDat <- aggData(filename = filename, loc = loc, fsr = fsr)
channels <- unique(aggDat$Channel)
if(1 %in% channels){
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = "thermal",
loc = loc)
}
if(2 %in% channels){
subDat_ch2 <- subtractControl(data = aggDat,
ch = 2,
cntl = "thermal",
loc = loc)
}
subDat_chU <- subtractControl(data = aggDat,
ch = "U",
cntl = "thermal",
loc = loc)
if(plotData){
if(exists(subDat_chU)){
plotRingData(data = subDat_chU,
splitPlot = FALSE,
loc = loc,
raw = TRUE)
plotRingData(data = subDat_chU,
splitPlot = TRUE,
loc = loc,
raw = FALSE)
}
if(exists(subDat_ch1)){
plotRingData(data = subDat_ch1,
splitPlot = FALSE,
loc = loc,
raw = FALSE)
}
if(exists(subDat_ch2)){
plotRingData(data = subDat_ch2,
splitPlot = FALSE,
loc = loc,
raw = FALSE)
}
}
if(netShifts){
netDat_ch1 <- getNetShifts(data = subDat_ch1,
time1 = time1,
time2 = time2,
step = 1,
loc = loc)
netDat_ch2 <- getNetShifts(data = subDat_ch2,
time1 = time1,
time2 = time2,
step = 1,
loc = loc)
plotNetShifts(data = netDat_ch1, step = 1, loc = loc)
plotNetShifts(data = netDat_ch2, step = 1, loc = loc)
}
if (chkRings){
checkRingQuality(data = aggData,
chkTime1 = 20,
chkTime2 = 30,
loc = loc)}
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
analyzeBiosensorData()
source('D:/Google Drive/Research/GitRepositories/biosensor/R/analyzeBiosensorData.R')
analyzeBiosensorData()
source('D:/Google Drive/Research/GitRepositories/biosensor/R/analyzeBiosensorData.R')
analyzeBiosensorData()
analyzeBiosensorData()
source('D:/Google Drive/Research/GitRepositories/biosensor/R/plotRingData.R')
analyzeBiosensorData()
dir <- system.file("extdata", "20171112_gaskTestData_MRR",
package = "biosensor")
setwd(dir)
analyzeBiosensorData()
time1 = 51
time2 = 39
filename = "groupNames_allClusters.csv"
loc = "plots"
fsr = FALSE
chkRings = FALSE
plotData = TRUE
celebrate = TRUE
netShifts = TRUE
getName()
aggDat <- aggData(filename = filename, loc = loc, fsr = fsr)
# get information of chip layout from github repository
if (getLayoutFile){
git <- "https://raw.githubusercontent.com/"
hub <- "JamesHWade/XenograftProteinProfiling/master/"
github <- paste0(git, hub)
url <- paste0(github, filename)
filename <- basename(url)
utils::download.file(url, filename)
} else { filename <- grep("groupNames",
list.files(pattern = ".csv"),
value = TRUE) }
getLayoutFile = FALSE
# get information of chip layout from github repository
if (getLayoutFile){
git <- "https://raw.githubusercontent.com/"
hub <- "JamesHWade/XenograftProteinProfiling/master/"
github <- paste0(git, hub)
url <- paste0(github, filename)
filename <- basename(url)
utils::download.file(url, filename)
} else { filename <- grep("groupNames",
list.files(pattern = ".csv"),
value = TRUE) }
# read in recipe/chip layout
recipe <- read.csv(filename)
filename
source('D:/Google Drive/Research/GitRepositories/biosensor/R/analyzeBiosensorData.R')
analyzeBiosensorData()
analyzeBiosensorData <- function(time1 = 51, time2 = 39,
filename = "groupNames_allClusters.csv",
loc = "plots",
fsr = FALSE,
chkRings = FALSE,
plotData = TRUE,
celebrate = TRUE,
netShifts = TRUE,
getLayoutFile = TRUE) {
getName()
aggDat <- aggData(filename = filename, loc = loc, fsr = fsr)
channels <- unique(aggDat$Channel, getLayoutFile = getLayoutFile)
if(1 %in% channels){
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = "thermal",
loc = loc)
}
if(2 %in% channels){
subDat_ch2 <- subtractControl(data = aggDat,
ch = 2,
cntl = "thermal",
loc = loc)
}
subDat_chU <- subtractControl(data = aggDat,
ch = "U",
cntl = "thermal",
loc = loc)
if(plotData){
if(exists("subDat_chU")){
plotRingData(data = subDat_chU,
splitPlot = FALSE,
loc = loc,
raw = TRUE)
plotRingData(data = subDat_chU,
splitPlot = TRUE,
loc = loc,
raw = FALSE)
}
if(exists("subDat_ch1")){
plotRingData(data = subDat_ch1,
splitPlot = FALSE,
loc = loc,
raw = FALSE)
}
if(exists("subDat_ch2")){
plotRingData(data = subDat_ch2,
splitPlot = FALSE,
loc = loc,
raw = FALSE)
}
}
if(netShifts){
if(exists("subDat_ch1")){
netDat_ch1 <- getNetShifts(data = subDat_ch1,
time1 = time1,
time2 = time2,
step = 1,
loc = loc)
plotNetShifts(data = netDat_ch1, step = 1, loc = loc)
}
if(exists("subDat_ch2")){
netDat_ch2 <- getNetShifts(data = subDat_ch2,
time1 = time1,
time2 = time2,
step = 1,
loc = loc)
plotNetShifts(data = netDat_ch2, step = 1, loc = loc)
}
}
if (chkRings){
checkRingQuality(data = aggData,
chkTime1 = 20,
chkTime2 = 30,
loc = loc)}
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
analyzeBiosensorData()
aggData <- function(loc = "plots", getLayoutFile = FALSE,
filename = "groupNames_allClusters.csv",
fsr = FALSE, fsrThresh = 5980) {
# get information of chip layout from github repository
if (getLayoutFile){
git <- "https://raw.githubusercontent.com/"
hub <- "JamesHWade/XenograftProteinProfiling/master/"
github <- paste0(git, hub)
url <- paste0(github, filename)
filename <- basename(url)
utils::download.file(url, filename)
} else { filename <- grep("groupNames",
list.files(pattern = ".csv"),
value = TRUE) }
# read in recipe/chip layout
recipe <- read.csv(filename)
# generate list of rings to analyze (gets all *.csv files)
rings <- list.files(pattern = "[[:digit:]].csv",
recursive = FALSE)
# add data to data frame corresponding for each ring in rings
df <- lapply(rings, function(i){
dat <- read.csv(i, header = FALSE)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
})
# correct for fsr
if(fsr){
for(i in seq_len(length(df))){
pointShift <- 0
for(j in seq_len(nrow(df[[i]]))){
shiftDiff <- pointShift - df[[i]][j, 2]
if(shiftDiff > fsrThresh){
df[[i]][j, 2] <- df[[i]][j, 2] + 5980
}
pointShift <- df[[i]][j, 2]
}
}
}
# combine data from list into single data frame
df <- dplyr::bind_rows(df)
# renames columns in df
names(df) <- c("Time", "Shift", "Ring", "Group", "Target", "Channel",
"Experiment", "TimePoint")
# creates "plots" directory
dir.create(loc, showWarnings = FALSE)
# saves aggregated data with name_allRings.csv
readr::write_csv(df, paste0(loc, '/', name, "_allRings.csv"))
return(df)
}
# get information of chip layout from github repository
if (getLayoutFile){
git <- "https://raw.githubusercontent.com/"
hub <- "JamesHWade/XenograftProteinProfiling/master/"
github <- paste0(git, hub)
url <- paste0(github, filename)
filename <- basename(url)
utils::download.file(url, filename)
} else { filename <- grep("groupNames",
list.files(pattern = ".csv"),
value = TRUE) }
getLayoutFile
analyzeBiosensorData(getLayoutFile = TRUE)
analyzeBiosensorData <- function(time1 = 51, time2 = 39,
filename = "groupNames_allClusters.csv",
loc = "plots",
fsr = FALSE,
chkRings = FALSE,
plotData = TRUE,
celebrate = TRUE,
netShifts = TRUE,
getLayoutFile = TRUE) {
getName()
aggDat <- aggData(filename = filename, loc = loc, fsr = fsr,
getLayoutFile = getLayoutFile)
channels <- unique(aggDat$Channel)
if(1 %in% channels){
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = "thermal",
loc = loc)
}
if(2 %in% channels){
subDat_ch2 <- subtractControl(data = aggDat,
ch = 2,
cntl = "thermal",
loc = loc)
}
subDat_chU <- subtractControl(data = aggDat,
ch = "U",
cntl = "thermal",
loc = loc)
if(plotData){
if(exists("subDat_chU")){
plotRingData(data = subDat_chU,
splitPlot = FALSE,
loc = loc,
raw = TRUE)
plotRingData(data = subDat_chU,
splitPlot = TRUE,
loc = loc,
raw = FALSE)
}
if(exists("subDat_ch1")){
plotRingData(data = subDat_ch1,
splitPlot = FALSE,
loc = loc,
raw = FALSE)
}
if(exists("subDat_ch2")){
plotRingData(data = subDat_ch2,
splitPlot = FALSE,
loc = loc,
raw = FALSE)
}
}
if(netShifts){
if(exists("subDat_ch1")){
netDat_ch1 <- getNetShifts(data = subDat_ch1,
time1 = time1,
time2 = time2,
step = 1,
loc = loc)
plotNetShifts(data = netDat_ch1, step = 1, loc = loc)
}
if(exists("subDat_ch2")){
netDat_ch2 <- getNetShifts(data = subDat_ch2,
time1 = time1,
time2 = time2,
step = 1,
loc = loc)
plotNetShifts(data = netDat_ch2, step = 1, loc = loc)
}
}
if (chkRings){
checkRingQuality(data = aggData,
chkTime1 = 20,
chkTime2 = 30,
loc = loc)}
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
analyzeBiosensorData(getLayoutFile = TRUE)
library(biosensor)
library(biosensor)
library(biosensor)
library(biosensor)
