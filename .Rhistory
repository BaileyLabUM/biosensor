install.packages("devtools")
install.packages("roxygen2")
devtools::load_all(".")
?group_by
library(dplyr)
?group_by
?arrange
?theme_set
?ylab
?mutate
?read_csv
library(tidyverse)
?read_csv
?download.file
list.files()
?bind_rows
?names
?write_csv
?subset
?var
?had
?head
?mean
?sd
?element_test
?element_text
?expression
library(biosensor)
setwd("D:/Box Sync/Data/20160908_gaskXP-001a")
analyzeMRRData()
traceback()
system.file("extdata", "sampledata", package = "biosensor)
system.file("extdata", "sampledata", package = "biosensor")
library(biosensor)
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
library(biosensor)
analyzeMRRData()
cntl <- "thermal"
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
loc <- "plots"
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
ch <- "U"
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
# configure plot and legend
plots <- ggplot2::ggplot(dat, aes(x = Time, y = Shift,
color = Target, group = Ring)) +
ggplot2::labs(x = "Time (min)",
y = expression(paste("Relative Shift (",Delta,"pm)")),
color = "Target") +
ggplot2::geom_line() +
ggplot2::ggtitle(paste(name, "Ch:", ch,
"Control:", cntl, sep = " "))
dat.2 <- dat %>% dplyr::group_by(Target, `Time Point`) %>%
dplyr::summarise_at(vars(Time, Shift), funs(mean, stats::sd))
dat.2
library(biosensor)
analyzeMRRData()
?analyzeMRRData
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
library(biosensor)
R CMD check
library(biosensor)
dir <- system.file("extdata", "sampledata", package = "biosensor")
setwd(dir)
analyzeMRRData(time1 = 51, time2 = 39,
filename = "groupNames_XPP.csv",
loc = "plots", fsr = FALSE,
chkRings = FALSE, plotData = FALSE)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(biosensor)
?mutate
library(biosensor)
setwd("D:/Box Sync/Data/20160908_gaskXP-001a/")
library(biosensor)
analyzeMRRData()
getwd()
analyzeMRRData(plotData = F)
warnings
warnings()
?analyzeMRRData
time1 = 51; time2 = 39; filename = "groupNames_XPP.csv";
loc = "plots"; fsr = FALSE; chkRings = FALSE; plotData = TRUE
# get information of chip layout from github repository
if (!file.exists(filename)){
git <- "https://raw.githubusercontent.com/"
hub <- "JamesHWade/XenograftProteinProfiling/master/"
github <- paste0(git, hub)
url <- paste0(github, filename)
filename <- basename(url)
utils::download.file(url, filename)
}
# read in recipe/chip layout
recipe <- readr::read_csv(filename)
colnames(recipe)[1] <- "Target" # rename col & remove byte order mark
targets <- recipe$Target
# generate list of rings to analyze (gets all *.csv files)
rings <- list.files(pattern = "[[:digit:]].csv",
recursive = FALSE)
i <- 2
dat <- readr::read_csv(i, col_names = FALSE)
i <- "02.csv"
i <- "07.csv"
dat <- readr::read_csv(i, col_names = FALSE)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
tmp1 < - tmp
tmp
tmp_1 <- tmp
i <- "25.csv"
dat <- readr::read_csv(i, col_names = FALSE)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp_2 <- tmp
head(tmp_1, 3
)
head(tmp_2, 3)
bind_rows(tmp_1, tmp_2)
dplyr::bind_rows(tmp_1, tmp_2)
# add data to data frame corresponding for each ring in rings
df <- lapply(rings, function(i){
dat <- readr::read_csv(i, col_names = FALSE)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
})
# add data to data frame corresponding for each ring in rings
df <- lapply(rings, function(i){
dat <- readr::read_csv(i, col_names = FALSE, col_types = d)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
})
# add data to data frame corresponding for each ring in rings
df <- lapply(rings, function(i){
dat <- readr::read_csv(i, col_names = FALSE, col_types = "d")
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
})
?read-csv
?read_csv
?read.csv
# add data to data frame corresponding for each ring in rings
df <- lapply(rings, function(i){
dat <- read.csv(i)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
})
# combine data from list into single data frame
df <- dplyr::bind_rows(df)
head(df)
# add data to data frame corresponding for each ring in rings
df <- lapply(rings, function(i){
dat <- read.csv(i, header = FALSE)
ringNum <- as.numeric(strsplit(i, "\\.")[[1]][1])
recipeCol <- which(recipe$Ring == ringNum)
tmp <- dat[,c(1,2)] # time and shift from raw data
tmp$ring <- ringNum
tmp$group <- recipe$Group[recipeCol]
tmp$groupName <- as.character(recipe$Target[[recipeCol]])
tmp$channel <- recipe$Channel[[recipeCol]]
tmp$run <- name
tmp$timePoint <- seq(1:nrow(dat))
tmp
})
# combine data from list into single data frame
df <- dplyr::bind_rows(df)
head(df)
?vars
?funs
?element_test
?element_text
devtools::use_readme_rmd()
getwd()
setwd("D:/Google Drive/Research/GitRepositories/biosensor/")
devtools::use_readme_rmd()
library(biosensor)
library(biosensor)
library(biosensor)
install_github("BaileyLabUM/biosensor")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("BaileyLabUM/biosensor")
library(biosensor)
?update.packages
library(biosensor)
example(biosensor)
examples(biosensor)
?biosensor
?analyzeMRRData
dir <- system.file("extdata", "sampledata", package = "biosensor")
setwd(dir)
analyzeMRRData(time1 = 51, time2 = 39,
filename = "groupNames_XPP.csv",
loc = "plots", fsr = FALSE,
chkRings = FALSE, plotData = FALSE, celebrate = FALSE)
analyzeMRRData(time1 = 51, time2 = 39,
filename = "groupNames_XPP.csv",
loc = "plots", fsr = TRUE,
chkRings = TRUE, plotData = TRUE,
celebrate = FALSE)
getwd()
setwd("~")
getwd
getwd()
install.gihub("BaileyLabUM/biosensor")
install.github("BaileyLabUM/biosensor")
library(devtools)
install.github("BaileyLabUM/biosensor")
install_github("BaileyLabUM/biosensor")
library(ggplot2)
install.packages("ggplot2")
