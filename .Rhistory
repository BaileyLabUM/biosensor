for(i in tarList) {
tarDat <- dplyr::filter(data, Target == i)
tarDat$Cycle <- as.numeric(tarDat$Cycle)
startA <- max(tarDat$NetShift)
startB <- 0.5
startC <- mean(c(startA, startB))
startD <- 1
y <- tarDat$NetShift
x <- as.numeric(tarDat$Cycle)
nls.control(minFactor = 5)
# tarFit <- tryCatch({fit.info <- nls(formula = y ~ A + (B - A) /
#                                             (1 + (x / C) ^ D),
#                                     start = list(A = startA,
#                                                  B = startB,
#                                                  C = startC,
#                                                  D = startD))
# },
tarFit <- tryCatch({fit.info <- glm(y ~ x)
},
error = function(e) {"failed"},
# finally = print(paste(i, startA, startB, startC, startD)))
finally = print(i))
if(tarFit[1] != "failed"){
fit[[i]] <- broom::tidy(fit.info)
fit[[i]]$Target <- unique(tarDat$Target)
A <- as.numeric(coef(fit.info)[1])
B <- as.numeric(coef(fit.info)[2])
C <- as.numeric(coef(fit.info)[3])
D <- as.numeric(coef(fit.info)[4])
testFun <- function(x) {A + (B - A) / (1 + (x / C) ^ D)}
plot <- ggplot2::ggplot(tarDat,
ggplot2::aes(x = Cycle,
y = NetShift,
group = Cycle)) +
ggplot2::geom_boxplot(fill = "red") +
ggplot2::stat_function(fun = testFun,
color = "blue", size = 1) +
ggplot2::labs(x = "Cycle Number",
y = expression(paste("Relative Shift (",
Delta,
"pm)")))
ggplot2::ggsave(plot,
filename = paste0(i, "CalCurve.png"),
width = 8, height = 6)
}
}
fit <- dplyr::bind_rows(fit)
capture.output(fit, file = "fitInfo.txt")
readr::write_csv(fit, path = "fitInfo.csv")
}
combMulti <- combineMultiShifts(loc = loc, name = name)
loc <- "plots"
name <- "test"
combMulti <- combineMultiShifts(loc = loc, name = name)
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
combMulti <- combineMultiShifts(loc = loc, name = name)
data <- combMulti
fitMultiCurves()
fitMultiCurves(data = data, loc = loc)
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
tarList <- unique(data$Target)
i <- tarList[1]
tarDat <- dplyr::filter(data, Target == i)
tarDat$Cycle <- as.numeric(tarDat$Cycle)
startA <- max(tarDat$NetShift)
startB <- 0.5
startC <- mean(c(startA, startB))
y <- tarDat$NetShift
startD <- 1
x <- as.numeric(tarDat$Cycle)
nls.control(minFactor = 5)
tarFit <- tryCatch({fit.info <- glm(y ~ x)
},
error = function(e) {"failed"},
# finally = print(paste(i, startA, startB, startC, startD)))
finally = print(i))
fit[[i]] <- broom::tidy(fit.info)
fit <- list()
fit[[i]] <- broom::tidy(fit.info)
fit[[1]]
library(biosensor)
library(biosensor)
library(biosensor)
fsr <- TRUE
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#' @param party a logical value that alerts you when your runs is done when TRUE
#' @param calibrate a logical value indicating if data shoudl be fit to logistic
#' function as calibration curve
#'
#' @export
calibrationStation <- function(time1 = 51,
time2 = 39,
getLayoutFile = FALSE,
calibrate = FALSE,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = TRUE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
uchannel = FALSE,
party = TRUE) {
# set theme for all plots
plotTheme <- ggplot2::theme_bw(base_size = 16) +
ggplot2::theme(panel.grid = ggplot2::element_blank())
ggplot2::theme_set(plotTheme)
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData(time1 = time1, time2 = time2,
getLayoutFile = getLayoutFile,
filename = filename, loc = loc,
cntl = cntl, chopRun = chopRun,
fsr = fsr, chkRings = chkRings,
plotData = plotData, celebrate = celebrate,
netShifts = netShifts, uchannel = uchannel)
setwd(directory)
})
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
if (party){shell.exec("https://youtu.be/L_jWHffIx5E?t=34s")}
}
devtools::load_all(".")
library(biosensor)
setwd("~/../Downloads/CalibrateMe")
calibrationStation()
calibrationStation()
calibrationStation(calibrate = TRUE, time1 = 52, time2 = 41)
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
x <- combineNetShifts()
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(netComb,
!grepl("thermal|Ignore|Control", Target))
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
calibrate = TRUE
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(grepl("thermal|Ignore|Control", Target))
netCombAvg <- netComb %>%
dplyr::group_by(netComb, Target, Concentration) %>%
dplyr::summarise_at(dplyr::vars(NetShift),
dplyr::funs(mean, sd = stats::sd))
combineNetShifts <- function(){
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(grepl("thermal|Ignore|Control", Target))
netCombAvg <- netComb %>%
dplyr::group_by(Target, Concentration) %>%
dplyr::summarise_at(dplyr::vars(NetShift),
dplyr::funs(mean, sd = stats::sd))
readr::write_csv(netComb, path = "combinedNetShifts.csv")
readr::write_csv(netCombAvg, path = "combinedNetShifts_Avg.csv")
return(netComb)
}
x <- combineNetShifts()
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
library(biosensor)
calibrationStation(time1 = 52, time2 = 41, calibrate = TRUE)
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#' @param party a logical value that alerts you when your runs is done when TRUE
#' @param calibrate a logical value indicating if data shoudl be fit to logistic
#' function as calibration curve
#'
#' @export
calibrationStation <- function(time1 = 51,
time2 = 39,
getLayoutFile = FALSE,
calibrate = FALSE,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = TRUE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
uchannel = FALSE,
party = TRUE,
name = "calibration") {
# set theme for all plots
ggplot2::theme_set(ggplot2::theme_classic(base_size = 16))
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData(time1 = time1, time2 = time2,
getLayoutFile = getLayoutFile,
filename = filename, loc = loc,
cntl = cntl, chopRun = chopRun,
fsr = fsr, chkRings = chkRings,
plotData = plotData, celebrate = celebrate,
netShifts = netShifts, uchannel = uchannel)
setwd(directory)
})
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
if (party){shell.exec("https://youtu.be/L_jWHffIx5E?t=34s")}
}
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#' @param party a logical value that alerts you when your runs is done when TRUE
#' @param calibrate a logical value indicating if data shoudl be fit to logistic
#' function as calibration curve
#'
#' @export
calibrationStation <- function(time1 = 51,
time2 = 39,
getLayoutFile = FALSE,
calibrate = FALSE,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = TRUE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
uchannel = FALSE,
party = TRUE,
name = "calibration") {
# set theme for all plots
ggplot2::theme_set(ggplot2::theme_classic(base_size = 16))
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData(time1 = time1, time2 = time2,
getLayoutFile = getLayoutFile,
filename = filename, loc = loc,
cntl = cntl, chopRun = chopRun,
fsr = fsr, chkRings = chkRings,
plotData = plotData, celebrate = celebrate,
netShifts = netShifts, uchannel = uchannel)
setwd(directory)
})
name <- name
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x)
fitCalCurves(data = x)
}
if (party){shell.exec("https://youtu.be/L_jWHffIx5E?t=34s")}
}
calibrationStation(time1 = 52, time2 = 41, calibrate = TRUE)
library(biosensor)
calibrationStation(time1 = 52, time2 = 41, calibrate = TRUE)
library(biosensor)
calibrationStation(time1 = 52, time2 = 41, calibrate = TRUE)
library(biosensor)
calibrationStation(time1 = 52, time2 = 41, calibrate = TRUE, indyRuns = FALSE)
traceback
traceback()
library(biosensor)
calibrationStation(time1 = 52, time2 = 41, calibrate = TRUE, indyRuns = FALSE)
x <- combineNetShifts()
combineNetShifts <- function(){
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(grepl("thermal|Ignore|Control", Target))
netCombAvg <- netComb %>%
dplyr::group_by(Target, Concentration) %>%
dplyr::summarise_at(dplyr::vars(NetShift),
dplyr::funs(mean, sd = stats::sd))
readr::write_csv(netComb, path = "combinedNetShifts.csv")
readr::write_csv(netCombAvg, path = "combinedNetShifts_Avg.csv")
return(netComb)
}
x <- combineNetShifts()
x
getwd()
setwd("..")
getwd()
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x, name = name)
fitCalCurves(data = x)
}
calibrate = TRUE
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x, name = name)
fitCalCurves(data = x)
}
plotCombinedNetShifts <- function(data, name){
plot <- ggplot2::ggplot(data,
ggplot2::aes(x = Concentration,
y = NetShift,
color = Target,
group = Concentration)) +
ggplot2::ggtitle(name) +
ggplot2::scale_x_log10() +
ggplot2::labs(x = "Analyte Concentration (pg/mL)",
y = expression(paste("Relative Shift (",
Delta,"pm)")),
color = "Target")
plot1 <- plot + ggplot2::geom_point()
plot1a <- plot1 + ggplot2::facet_wrap(~Target)
plot2 <- plot + ggplot2::geom_boxplot() +
ggplot2::facet_wrap(~Target)
ggplot2::ggsave(plot = plot1,
filename = paste0("netShiftsCombined_point.png"),
width = 16, height = 12)
ggplot2::ggsave(plot = plot1a,
filename = paste0("netShiftsCombined_pointwrap.png"),
width = 16, height = 12)
ggplot2::ggsave(plot = plot2,
filename = paste0("netShiftsCombined_box.png"),
width = 16, height = 12)
}
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x, name = name)
fitCalCurves(data = x)
}
name = "calibration"
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x, name = name)
fitCalCurves(data = x)
}
x <- combineNetShifts()
x
getwD()
getwd()
combineNetShifts()
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netList
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
netShifts
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(grepl("thermal|Ignore|Control", Target))
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(grepl("thermal|Ignore|Control", Target))
netComb
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(!grepl("thermal|Ignore|Control", Target))
netComb
combineNetShifts <- function(){
netList <- grep('net',
list.files(pattern = '.csv', recursive = TRUE),
value = TRUE)
netShifts <- lapply(netList, function(i){
netShift <- read.csv(i)
# convert Target and Experiment to character type to avoid
# warnings when using bind_rows function below
netShift$Target <- as.character(netShift$Target)
netShift$Experiment <- as.character(netShift$Experiment)
netShift
})
`%>%` <- magrittr::`%>%`
netComb <- netShifts %>% dplyr::bind_rows(netShifts) %>%
dplyr::filter(!grepl("thermal|Ignore|Control", Target))
netCombAvg <- netComb %>%
dplyr::group_by(Target, Concentration) %>%
dplyr::summarise_at(dplyr::vars(NetShift),
dplyr::funs(mean, sd = stats::sd))
readr::write_csv(netComb, path = "combinedNetShifts.csv")
readr::write_csv(netCombAvg, path = "combinedNetShifts_Avg.csv")
return(netComb)
}
x <- combineNetShifts()
plotCombinedNetShifts(data = x, name = name)
fitCalCurves(data = x)
#' Calibration Station
#'
#' Analyze series of runs on M1 and generate calibration curves for each target
#'
#' @inheritParams analyzeBiosensorData
#' @param party a logical value that alerts you when your runs is done when TRUE
#' @param calibrate a logical value indicating if data shoudl be fit to logistic
#' function as calibration curve
#'
#' @export
calibrationStation <- function(time1 = 51,
time2 = 39,
getLayoutFile = FALSE,
calibrate = FALSE,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = TRUE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
uchannel = FALSE,
party = TRUE,
name = "calibration",
indyRuns = TRUE) {
# set theme for all plots
ggplot2::theme_set(ggplot2::theme_classic(base_size = 16))
foldersList <- list.dirs(recursive = FALSE)
directory <- getwd()
if(indyRuns){
lapply(foldersList, function(i){
setwd(i)
analyzeBiosensorData(time1 = time1, time2 = time2,
getLayoutFile = getLayoutFile,
filename = filename, loc = loc,
cntl = cntl, chopRun = chopRun,
fsr = fsr, chkRings = chkRings,
plotData = plotData,
celebrate = celebrate,
netShifts = netShifts,
uchannel = uchannel)
setwd(directory)
})
}
if(calibrate){
x <- combineNetShifts()
plotCombinedNetShifts(data = x, name = name)
fitCalCurves(data = x)
}
if (party){shell.exec("https://youtu.be/L_jWHffIx5E?t=34s")}
}
calibrationStation(calibrate = TRUE, indyRuns = FALSE)
library(biosensor)
calibrationStation(calibrate = TRUE, indyRuns = FALSE)
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
librayr(biosensor)
library(biosensor)
?analyzeBiosensorData
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
