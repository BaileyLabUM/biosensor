install.packages("devtools")
install.packages("roxygen2")
devtools::load_all(".")
?group_by
library(dplyr)
?group_by
?arrange
?theme_set
?ylab
?mutate
?read_csv
library(tidyverse)
?read_csv
?download.file
list.files()
?bind_rows
?names
?write_csv
?subset
?var
?had
?head
?mean
?sd
?element_test
?element_text
?expression
library(biosensor)
setwd("D:/Box Sync/Data/20160908_gaskXP-001a")
analyzeMRRData()
traceback()
system.file("extdata", "sampledata", package = "biosensor)
system.file("extdata", "sampledata", package = "biosensor")
library(biosensor)
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
library(biosensor)
analyzeMRRData()
cntl <- "thermal"
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
loc <- "plots"
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
ch <- "U"
# use thermally controlled data if desired
if (cntl != "raw"){
dat <- readr::read_csv(paste(loc, "/", name, "_", cntl, "Control",
"_ch", ch,".csv", sep=''))
} else if (cntl == "raw") {
dat <- readr::read_csv(paste(loc, "/", name, "_allRings.csv", sep=''))
if (ch != "U") {dat <- dplyr::filter(dat, Channel == ch)}
}
# configure plot and legend
plots <- ggplot2::ggplot(dat, aes(x = Time, y = Shift,
color = Target, group = Ring)) +
ggplot2::labs(x = "Time (min)",
y = expression(paste("Relative Shift (",Delta,"pm)")),
color = "Target") +
ggplot2::geom_line() +
ggplot2::ggtitle(paste(name, "Ch:", ch,
"Control:", cntl, sep = " "))
dat.2 <- dat %>% dplyr::group_by(Target, `Time Point`) %>%
dplyr::summarise_at(vars(Time, Shift), funs(mean, stats::sd))
dat.2
library(biosensor)
analyzeMRRData()
?analyzeMRRData
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
