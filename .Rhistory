cntl = cntl,
loc = loc,
name = name)
combMulti <- combineMultiShifts(loc = loc, name = name)
plotMulitShifts(data = combMulti, loc = loc, name = name)
fitMultiCurves(data = combMulti, loc = loc)
netShifts <- FALSE
}
if(netShifts){
if(exists("subDat_ch1")){
netDat_ch1 <- getNetShifts(data = subDat_ch1,
time1 = time1,
time2 = time2,
step = 1,
loc = loc,
cntl = cntl,
name = name)
plotNetShifts(data = netDat_ch1,
step = 1,
loc = loc,
name = name)
}
if(exists("subDat_ch2")){
netDat_ch2 <- getNetShifts(data = subDat_ch2,
time1 = time1,
time2 = time2,
step = 1,
loc = loc,
cntl = cntl,
name = name)
plotNetShifts(data = netDat_ch2,
step = 1,
loc = loc,
name = name)
}
if(exists("subDat_chU")){
netDat_chU <- getNetShifts(data = subDat_chU,
time1 = time1,
time2 = time2,
step = 1,
loc = loc,
cntl = cntl,
name = name)
plotNetShifts(data = netDat_chU,
step = 1,
loc = loc,
name = name)
}
}
if (chkRings){
checkRingQuality(data = aggData,
chkTime1 = 20,
chkTime2 = 30,
loc = loc,
name = name)}
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
fsr = FALSE
chkRings = FALSE
plotData = TRUE
celebrate = FALSE
analyzeBiosensorData <- function(time1 = 51,
time2 = 39,
filename = "groupNames_XPP.csv",
loc = "plots",
cntl = "thermal",
chopRun = 0,
fsr = FALSE,
chkRings = FALSE,
plotData = TRUE,
celebrate = FALSE,
netShifts = TRUE,
getLayoutFile = FALSE,
uchannel = FALSE,
multiNet = FALSE) {
# set theme for all plots
ggplot2::theme_set(ggplot2::theme_classic(base_size = 16))
name <- getName()
dat <- aggData(filename = filename, loc = loc, fsr = fsr,
getLayoutFile = getLayoutFile, name = name)
if(chopRun > 0){
aggDat <- chopUpRun(data = dat,
startRun = chopRun,
loc = loc,
name = name)
} else {aggDat <- dat}
channels <- unique(aggDat$Channel)
if(1 %in% channels){
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = cntl,
loc = loc,
name = name)
}
if(2 %in% channels){
subDat_ch2 <- subtractControl(data = aggDat,
ch = 2,
cntl = cntl,
loc = loc,
name = name)
}
if(uchannel){
subDat_chU <- subtractControl(data = aggDat,
ch = "U",
cntl = cntl,
loc = loc,
name = name)
}
if(plotData){
if(exists("subDat_chU")){
plotRingData(data = subDat_chU,
splitPlot = FALSE,
loc = loc,
raw = TRUE,
name = name)
plotRingData(data = subDat_chU,
splitPlot = TRUE,
loc = loc,
raw = FALSE,
name = name)
}
if(exists("subDat_ch1")){
plotRingData(data = subDat_ch1,
splitPlot = FALSE,
loc = loc,
raw = FALSE,
name = name)
}
if(exists("subDat_ch2")){
plotRingData(data = subDat_ch2,
splitPlot = FALSE,
loc = loc,
raw = FALSE,
name = name)
}
}
if(multiNet){
multiNetShift(netFile = "multiNetShifts.csv",
data = subDat_chU,
cntl = cntl,
loc = loc,
name = name)
combMulti <- combineMultiShifts(loc = loc, name = name)
plotMulitShifts(data = combMulti, loc = loc, name = name)
fitMultiCurves(data = combMulti, loc = loc)
netShifts <- FALSE
}
if(netShifts){
if(exists("subDat_ch1")){
netDat_ch1 <- getNetShifts(data = subDat_ch1,
time1 = time1,
time2 = time2,
step = 1,
loc = loc,
cntl = cntl,
name = name)
plotNetShifts(data = netDat_ch1,
step = 1,
loc = loc,
name = name)
}
if(exists("subDat_ch2")){
netDat_ch2 <- getNetShifts(data = subDat_ch2,
time1 = time1,
time2 = time2,
step = 1,
loc = loc,
cntl = cntl,
name = name)
plotNetShifts(data = netDat_ch2,
step = 1,
loc = loc,
name = name)
}
if(exists("subDat_chU")){
netDat_chU <- getNetShifts(data = subDat_chU,
time1 = time1,
time2 = time2,
step = 1,
loc = loc,
cntl = cntl,
name = name)
plotNetShifts(data = netDat_chU,
step = 1,
loc = loc,
name = name)
}
}
if (chkRings){
checkRingQuality(data = aggData,
chkTime1 = 20,
chkTime2 = 30,
loc = loc,
name = name)}
if (celebrate){shell.exec("https://youtu.be/dQw4w9WgXcQ")}
}
netShifts = TRUE
getLayoutFile = FALSE
uchannel = TRUE
multiNet = TRUE
# set theme for all plots
ggplot2::theme_set(ggplot2::theme_classic(base_size = 16))
name <- getName()
dat <- aggData(filename = filename, loc = loc, fsr = fsr,
getLayoutFile = getLayoutFile, name = name)
if(chopRun > 0){
aggDat <- chopUpRun(data = dat,
startRun = chopRun,
loc = loc,
name = name)
} else {aggDat <- dat}
channels <- unique(aggDat$Channel)
if(1 %in% channels){
subDat_ch1 <- subtractControl(data = aggDat,
ch = 1,
cntl = cntl,
loc = loc,
name = name)
}
if(2 %in% channels){
subDat_ch2 <- subtractControl(data = aggDat,
ch = 2,
cntl = cntl,
loc = loc,
name = name)
}
if(uchannel){
subDat_chU <- subtractControl(data = aggDat,
ch = "U",
cntl = cntl,
loc = loc,
name = name)
}
if(plotData){
if(exists("subDat_chU")){
plotRingData(data = subDat_chU,
splitPlot = FALSE,
loc = loc,
raw = TRUE,
name = name)
plotRingData(data = subDat_chU,
splitPlot = TRUE,
loc = loc,
raw = FALSE,
name = name)
}
if(exists("subDat_ch1")){
plotRingData(data = subDat_ch1,
splitPlot = FALSE,
loc = loc,
raw = FALSE,
name = name)
}
if(exists("subDat_ch2")){
plotRingData(data = subDat_ch2,
splitPlot = FALSE,
loc = loc,
raw = FALSE,
name = name)
}
}
multiNetShift(netFile = "multiNetShifts.csv",
data = subDat_chU,
cntl = cntl,
loc = loc,
name = name)
combMulti <- combineMultiShifts(loc = loc, name = name)
`%>%` <- magrittr::`%>%`
netList <- grep('net',
list.files(pattern = '.csv',
recursive = TRUE),
value = TRUE)
removeFiles <- grep("Combined", netList, value = TRUE)
netList <- netList[!netList %in% removeFiles]
netShifts <- lapply(netList, read.csv)
netComb <- dplyr::bind_rows(netShifts)
str(netShifts)
`%>%` <- magrittr::`%>%`
netList <- grep('net',
list.files(pattern = '.csv',
recursive = TRUE),
value = TRUE)
removeFiles <- grep("Combined", netList, value = TRUE)
netList <- netList[!netList %in% removeFiles]
netShifts <- lapply(netList, function(i){
dat <- read.csv(netList[i])
dat$Target <- as.character(dat$Target)
dat
})
getwd()
netList[i]
netList[1]
i <- 1
dat <- read.csv(netList[i])
dat$Target <- as.character(dat$Target)
dat
netShifts <- lapply(netList, function(i){
dat <- read.csv(netList[i])
dat$Target <- as.character(dat$Target)
dat
})
netShifts <- lapply(netList, function(i){
print(i)
dat <- read.csv(netList[i])
dat$Target <- as.character(dat$Target)
dat
})
i <- 2
netList[2]
read.csv('netList[2]')
read.csv("plots/GBM 10 BEZ 1h ch1 p1 ch2 p2_netShifts_Controlcntl_chU_step25.csv")
"plots/GBM 10 BEZ 1h ch1 p1 ch2 p2_netShifts_Controlcntl_chU_step25.csv" == netList[2]
read.csv(netList[2])
netShifts <- lapply(netList, function(i){
print(i)
dat <- read.csv(netList[i])
dat$Target <- as.character(dat$Target)
dat
})
read.csv(netList[1])
read.csv(netList[2])
netShifts <- lapply(netList, function(i){
print(i)
dat <- read.csv(i)
dat$Target <- as.character(dat$Target)
dat
})
netComb <- dplyr::bind_rows(netShifts)
netCast <- reshape2::dcast(netComb, Ring + Group + Target + Experiment + Channel ~
Step, value.var = "NetShift")
netCast
combineMultiShifts <- function(loc, net, name){
`%>%` <- magrittr::`%>%`
netList <- grep('net',
list.files(pattern = '.csv',
recursive = TRUE),
value = TRUE)
removeFiles <- grep("Combined", netList, value = TRUE)
netList <- netList[!netList %in% removeFiles]
netShifts <- lapply(netList, function(i){
print(i)
dat <- read.csv(i)
dat$Target <- as.character(dat$Target)
dat
})
netComb <- dplyr::bind_rows(netShifts)
netCast <- reshape2::dcast(netComb, Ring + Group + Target + Experiment + Channel ~
Step, value.var = "NetShift",
fun.aggregate = mean)
netCast <- netCast %>% dplyr::mutate(`25` = `20` + `25`,
`30` = `25` + `30`,
`35` = `30` + `35`,
`40` = `35` + `40`,
`45` = `40` + `45`)
netMelt <- reshape2::melt(netCast, id.vars = c("Ring", "Group", "Target",
"Experiment", "Channel"),
measure.vars = c("20", "25", "30", "35", "40", "45"),
variable.name = "Cycle",
value.name = "NetShift")
filename <- paste0(loc, "/", name, "_netShiftsCombined", ".csv")
readr::write_csv(netMelt, path = filename)
}
`%>%` <- magrittr::`%>%`
netList <- grep('net',
list.files(pattern = '.csv',
recursive = TRUE),
value = TRUE)
removeFiles <- grep("Combined", netList, value = TRUE)
netList <- netList[!netList %in% removeFiles]
netShifts <- lapply(netList, function(i){
print(i)
dat <- read.csv(i)
dat$Target <- as.character(dat$Target)
dat
})
netComb <- dplyr::bind_rows(netShifts)
netCast <- reshape2::dcast(netComb, Ring + Group + Target + Experiment + Channel ~
Step, value.var = "NetShift",
fun.aggregate = mean)
netCast <- netCast %>% dplyr::mutate(`25` = `20` + `25`,
`30` = `25` + `30`,
`35` = `30` + `35`,
`40` = `35` + `40`,
`45` = `40` + `45`)
netMelt <- reshape2::melt(netCast, id.vars = c("Ring", "Group", "Target",
"Experiment", "Channel"),
measure.vars = c("20", "25", "30", "35", "40", "45"),
variable.name = "Cycle",
value.name = "NetShift")
netMelt
combineMultiShifts <- function(loc, net, name){
`%>%` <- magrittr::`%>%`
netList <- grep('net',
list.files(pattern = '.csv',
recursive = TRUE),
value = TRUE)
removeFiles <- grep("Combined", netList, value = TRUE)
netList <- netList[!netList %in% removeFiles]
netShifts <- lapply(netList, function(i){
print(i)
dat <- read.csv(i)
dat$Target <- as.character(dat$Target)
dat
})
netComb <- dplyr::bind_rows(netShifts)
netCast <- reshape2::dcast(netComb, Ring + Group + Target + Experiment + Channel ~
Step, value.var = "NetShift",
fun.aggregate = mean)
netCast <- netCast %>% dplyr::mutate(`25` = `20` + `25`,
`30` = `25` + `30`,
`35` = `30` + `35`,
`40` = `35` + `40`,
`45` = `40` + `45`)
netMelt <- reshape2::melt(netCast, id.vars = c("Ring", "Group", "Target",
"Experiment", "Channel"),
measure.vars = c("20", "25", "30", "35", "40", "45"),
variable.name = "Cycle",
value.name = "NetShift")
filename <- paste0(loc, "/", name, "_netShiftsCombined", ".csv")
readr::write_csv(netMelt, path = filename)
}
library(biosensor)
analyzeBiosensorData(uchannel = TRUE, multiNet = TRUE)
library(biosensor)
analyzeBiosensorData(uchannel = TRUE, multiNet = TRUE)
fitMultiCurves <- function(data, loc){
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
tarList <- unique(data$Target)
fit <- list()
for(i in tarList) {
tarDat <- dplyr::filter(data, Target == i)
tarDat$Cycle <- as.numeric(tarDat$Cycle)
startA <- max(tarDat$NetShift)
startB <- 0.5
startC <- mean(c(startA, startB))
startD <- 1
y <- tarDat$NetShift
x <- as.numeric(tarDat$Cycle)
nls.control(minFactor = 5)
# tarFit <- tryCatch({fit.info <- nls(formula = y ~ A + (B - A) /
#                                             (1 + (x / C) ^ D),
#                                     start = list(A = startA,
#                                                  B = startB,
#                                                  C = startC,
#                                                  D = startD))
# },
tarFit <- tryCatch({fit.info <- glm(y ~ x)
},
error = function(e) {"failed"},
# finally = print(paste(i, startA, startB, startC, startD)))
finally = print(i))
if(tarFit[1] != "failed"){
fit[[i]] <- broom::tidy(fit.info)
fit[[i]]$Target <- unique(tarDat$Target)
A <- as.numeric(coef(fit.info)[1])
B <- as.numeric(coef(fit.info)[2])
C <- as.numeric(coef(fit.info)[3])
D <- as.numeric(coef(fit.info)[4])
testFun <- function(x) {A + (B - A) / (1 + (x / C) ^ D)}
plot <- ggplot2::ggplot(tarDat,
ggplot2::aes(x = Cycle,
y = NetShift,
group = Cycle)) +
ggplot2::geom_boxplot(fill = "red") +
ggplot2::stat_function(fun = testFun,
color = "blue", size = 1) +
ggplot2::labs(x = "Cycle Number",
y = expression(paste("Relative Shift (",
Delta,
"pm)")))
ggplot2::ggsave(plot,
filename = paste0(i, "CalCurve.png"),
width = 8, height = 6)
}
}
fit <- dplyr::bind_rows(fit)
capture.output(fit, file = "fitInfo.txt")
readr::write_csv(fit, path = "fitInfo.csv")
}
combMulti <- combineMultiShifts(loc = loc, name = name)
loc <- "plots"
name <- "test"
combMulti <- combineMultiShifts(loc = loc, name = name)
devtools::load_all("D:/Google Drive/Research/GitRepositories/biosensor")
combMulti <- combineMultiShifts(loc = loc, name = name)
data <- combMulti
fitMultiCurves()
fitMultiCurves(data = data, loc = loc)
ggplot2::theme_set(ggthemes::theme_few(base_size = 16))
tarList <- unique(data$Target)
i <- tarList[1]
tarDat <- dplyr::filter(data, Target == i)
tarDat$Cycle <- as.numeric(tarDat$Cycle)
startA <- max(tarDat$NetShift)
startB <- 0.5
startC <- mean(c(startA, startB))
y <- tarDat$NetShift
startD <- 1
x <- as.numeric(tarDat$Cycle)
nls.control(minFactor = 5)
tarFit <- tryCatch({fit.info <- glm(y ~ x)
},
error = function(e) {"failed"},
# finally = print(paste(i, startA, startB, startC, startD)))
finally = print(i))
fit[[i]] <- broom::tidy(fit.info)
fit <- list()
fit[[i]] <- broom::tidy(fit.info)
fit[[1]]
library(biosensor)
library(biosensor)
library(biosensor)
